usage: pymarkdown [-h] [-e ENABLE_RULES] [-d DISABLE_RULES]
                  [--add-plugin ADD_PLUGIN] [--config CONFIGURATION_FILE]
                  [--set SET_CONFIGURATION] [--strict-config] [--stack-trace]
                  [--log-level {CRITICAL,ERROR,WARNING,INFO,DEBUG}]
                  [--log-file LOG_FILE]
                  {plugins,extensions,scan,scan-stdin,version} ...

Lint any found Markdown files.

positional arguments:
  {plugins,extensions,scan,scan-stdin,version}
    plugins             plugin commands
    extensions          extension commands
    scan                scan the Markdown files in the specified paths
    scan-stdin          scan the standard input as a Markdown file
    version             version of the application

optional arguments:
  -h, --help            show this help message and exit
  -e ENABLE_RULES, --enable-rules ENABLE_RULES
                        comma separated list of rules to enable
  -d DISABLE_RULES, --disable-rules DISABLE_RULES
                        comma separated list of rules to disable
  --add-plugin ADD_PLUGIN
                        path to a plugin containing a new rule to apply
  --config CONFIGURATION_FILE, -c CONFIGURATION_FILE
                        path to the configuration file to use
  --set SET_CONFIGURATION, -s SET_CONFIGURATION
                        manually set an individual configuration property
  --strict-config       throw an error if configuration is bad, instead of
                        assuming default
  --stack-trace         if an error occurs, print out the stack trace for
                        debug purposes
  --log-level {CRITICAL,ERROR,WARNING,INFO,DEBUG}
                        minimum level required to log messages
  --log-file LOG_FILE   destination file for log messages
